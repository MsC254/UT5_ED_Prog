@startuml diagrama_clases.svg

' Definición de enumerados
enum TipoCoche {
    SEDAN
    SUV
    DEPORTIVO
}

enum TipoMoto {
    SCOOTER
    DEPORTIVA
}

' Interfaz
interface Valorable {
    + {abstract} double calcularDepreciacion()
}

' Clase abstracta
abstract class Vehiculo implements Valorable {
    - {final} String matricula
    - String marca
    - String modelo
    - int kilometraje
    - double precio
    - LocalDate fechaFabricacion
    - Persona propietario
    + {abstract} double calcularDepreciacion()
    + double calcularRiesgo(int experienciaConductor)
    + String getMatricula()
    + void setPropietario(Persona propietario)
}

' Clase Persona
class Persona {
    - String nombre
    - String apellidos
    - String dni
    - int añoNacimiento
    - LocalDate fechaCaducidadCarnet
    + boolean validarDNI()
    + int getEdad()
}

' Jerarquía de vehículos
class Coche extends Vehiculo {
    - int numPuertas
    - TipoCoche tipo
    + double calcularDepreciacion()
}

class Moto extends Vehiculo {
    - int cilindrada
    - TipoMoto tipo
    + double calcularDepreciacion()
}

class Camion extends Vehiculo {
    - double capacidadCarga
    - int ejes
    + double calcularDepreciacion()
}

' Subtipos de Coche
class SUV extends Coche {
    - boolean traccion4x4
    - double alturaSuspension
    + double calcularDepreciacion()
}

class Sedan extends Coche {
    - boolean maleteroGrande
    + double calcularDepreciacion()
}

class Deportivo extends Coche {
    - double aceleracion0a100
    + double calcularDepreciacion()
}

' Subtipos de Moto
class Scooter extends Moto {
    - boolean maletin
    + double calcularDepreciacion()
}

class MotoDeportiva extends Moto {
    - boolean carenado
    + double calcularDepreciacion()
}

' Relaciones
Vehiculo "1" *-- "0..1" Persona : propietario

@enduml